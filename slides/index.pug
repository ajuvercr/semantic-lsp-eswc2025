doctype html
html
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Slides: Semantic Web Langauge Server
    link(rel="stylesheet", href="node_modules/@shower/ribbon/styles/styles.css")
    link(rel="stylesheet", href="./prism.css")
    link(rel="stylesheet", href="./local.css")
    style.
        .shower {
            --slide-ratio: calc(16 / 9);
        }
  body(class="shower list")
    header.caption
      h1 Semantic Web Language Server (SWLS)
      p Enhancing the Developer Experience for Semantic Web Practitioners

    section.slide.title
      h2 Semantic Web Language Server (SWLS)
      h4 Enhancing the Developer Experience for Semantic Web Practitioners
      div #[em Arthur Vercruysse], Julián Rojas Meléndez, Pieter Colpaert #[br] Ghent University - IMEC

    section.slide
      h2 Context
      ul
        li Semantic Web comes in many forms: Turtle, SPARQL, etc
        li When editing Linked Data, a human error is quickly made
        li Thanks to best practices, the source of truth is often #[strong available] [1]
      h4 We introduce the Semantic Web Language Server (SWLS).
      p.footer [1]: #[a(href="https://lov.linkeddata.es/dataset/lov/") lov.linkeddata.es/dataset/lov/]

    section.slide
      h2 Motivation
      p Other tools exist but are limited
      ul
        li Focus on a single language, Yasgui [2]
        li Focus on a single dataset, #[a(href="https://query.wikidata.org/") query.wikidata.org]
        li Most lack local integrations
      p.footer [2]: #[a(href="https://yasgui.org/") yasgui.org/]

    section.slide.bg-inspirational
      .overlay
        blockquote.large What if writing RDF felt like writing code?
      small.footer.right Picture by Greg Rakozy
      figure
        image.cover(src="./images/inspirational.jpg")

    section.slide.bg-inspirational
      .overlay
        h1 We bring to you
          strong
            em The Semantic Web Language Server
      small.footer.right Picture by Greg Rakozy
      figure
        image.cover(src="./images/inspirational.jpg")

    section.slide
      h2 What is the Semantic Web Language Server (SWLS)?
      ul
        li Language Server implementation in Rust (Bevy ECS-based)
        li Supports Turtle, JSON-LD, and SPARQL
        li #[strong Features:] completion, diagnostics, highlighting, formatting, hover

    section.slide
      h2 Language Server Protocol
      ul
        li Standard JSON-RPC protocol.
        li Reduces integration complexity: #[em O(M+N)] instead of #[em O(M×N)].
        li Cross-editor language support (VSCode, NeoVim, etc.).
      div.image-row
        img(src="https://upload.wikimedia.org/wikipedia/commons/9/9a/Visual_Studio_Code_1.35_icon.svg")
        img(src="https://upload.wikimedia.org/wikipedia/commons/3/3a/Neovim-mark.svg")


    section.slide
      h2 Entity Component System (ECS)
      //p Originally created to handle data management in games, following composition over inheritance, all data is present in the #[em world]
      ul
        li #[strong Entities:] bundles of components, here documents in the editor
        li #[strong Components:] objects part of an entity
        li #[strong Systems:] functions that acts on entities with the desired components
        //li #[strong Resources:] static data linked to the #[em world]
      //p Different systems are bundled in #[em schedules].

    section.slide
      h2 File #[em index.ttl]
      pre
        code(class="language-turtle").
          @prefix foaf: &lt;http://xmlns.com/foaf/0.1/>.
          <#you> a foaf:Person;
            foaf:knows [
              foaf:name "Arthur";
              foaf:lastName "Vercruysse";
            ].

    section.slide
      h2 Entity Component System (ECS)
      .entities 
        .entity
          header index.ttl
          .component.bold Source Code
          .component.bold TurtleLang


    section.slide
      h2 Parse Systems
      .row 
        .system
          header.correct Parse Turtle
          section Parses the Turtle source code
          section.input
            span Source Code
            br
            span.bold.correct Turtle Lang
          section.output
            span Triples
            br
            span Prefixes
        .system
          header Parse JSON-LD
          section Parses the JSON-LD source code
          section.input
            span Source Code
            br
            span.bold.faulty JSON-LD Lang
          section.output
            span Triples
            br
            span Prefixes

    section.slide
      h2 Entity Component System (ECS)
      .entities 
        .entity
          header index.ttl
          .component Source Code
          .component TurtleLang
          .component.bold Triples
          .component.bold Prefixes

    section.slide
      h2 Other Systems
      .row 
        .system
          header LOV services
          section Fetch ontologies from LOV according to the defined prefixes. #[br] Adds these documents to the ECS.
          section.input
            span Prefixes
          section.output
        .system
          header Derive Classes
          section Extracts #[code owl:Class] objects. #[br] Extracts #[code owl:Property] objects.
          section.input
            span Triples
          section.output
            span Derived Classes
            br
            span Derived Properties

    section.slide
      h2 Entity Component System (ECS)
      .entities 
        .entity
          header index.ttl
          .component Source Code
          .component TurtleLang
          .component Triples
          .component Prefixes
        .entity.next
          header foaf.ttl
          .component Source Code
          .component TurtleLang
          .component.next Triples
          .component.next Prefixes
          .component.bold.next Derived Classes
          .component.bold.next Derived Properties

    section.slide
      h2 Entity Component System (ECS)
      p 
        | Other operations like autocompletion work the same way.
        br
        | Multiple small systems find their required data and transform that into the expected data structure.
      p #[strong Autocompletion] is powered by things like the #[strong defined classes] and #[strong properties] from linked entities but also by other services like prefix.cc

    section.slide
      h2 Key Points
      ul
        li ECS makes the SWLS very extendable
        li Many systems are language agnostic
        li Adding a language is as simple as adding a tokenizer and a parser

    section.slide.dark-slide(style="background: black; color: white")
      h1(style="text-align: center; font-size: 3.5rem; margin-top: 30vh")
        | Alright...
      h2(style="text-align: center; font-weight: 300")
        | Could you finally show me something?

    section.slide.bg-inspirational
      .overlay.bottom
        .large Complete prefixes with prefix.cc
      figure
        image.cover(src="./images/complete-1.png")

    section.slide.bg-inspirational
      .overlay.bottom
        .large Complete classes from foaf ontology
      figure
        image.cover(src="./images/complete-2.png")

    section.slide.bg-inspirational
      .overlay.bottom
        .large Complete properties from foaf ontology
      figure
        image.cover(src="./images/complete-3.png")

    section.slide.bg-inspirational
      .overlay.bottom
        .large SHACL validation with rudof
      figure
        image.cover(src="./images/diagnostics.png")

    section.slide
      h2 SWLS Capabilities
      .row
        ul
          li
            strong Diagnostics
            ul
              li Syntax
              li Undefined prefixes/properties
              li Shape violations
          li
            strong Highlighting
            ul
              li Syntactic (numbers and IRIs)
              li Semantic (from ontology)
        ul
          li
            strong Completion
            ul
              li Syntax (keywords, prefixes)
              li Semantic (typed suggestions)
          li #[strong Formatting]
          li #[strong Renaming]

    section.slide
      h2 SWLS availability
      ul
        li #[strong VSCode:] Web Extension to download
        li #[strong NeoVim:] Binary to install and configure with #[em nvim-lspconfig]
        li #[strong Web demo:] Demonstrates capabilities with 4 different editor panels

    section.slide
      h2 Conclusion
      ul
        li SWLS boosts accessibility and productivity.
        li Editor-agnostic and modular.
        li Try the online  Demo][3]!
        li Open source: pull requests are welcome #[br] #[a(href="https://github.com/ajuvercr/semantic-web-lsp") github.com/ajuvercr/semantic-web-lsp].
      .p.footer [1]: #[a(href="https://ajuvercr.github.io/semantic-web-lsp/") ajuvercr.github.io/semantic-web-lsp/]
          

    script(src="node_modules/@shower/core/dist/shower.js")
    script(src="./prism.js")
